{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/","matchPath":"/*","result":{"data":{"deck":{"id":"3c7008a1-f747-50bd-9ab5-48cd6114ff33","body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar theme = nightOwl;\nvar _frontmatter = {};\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Perfomance wins in react 18\"), mdx(\"hr\", null), mdx(\"h3\", null, \"React 18\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Rendering performance\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Concurrent rendering\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Transitions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Automatic batching\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Suspense\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"React server components\")), mdx(\"hr\", null), mdx(\"img\", {\n    src: intro,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"ul\", null, mdx(\"li\", null, \"Rendering performance\"), mdx(\"li\", {\n    style: {\n      \"opacity\": \"0.3\"\n    }\n  }, \"Concurrent rendering\"), mdx(\"li\", {\n    style: {\n      \"opacity\": \"0.3\"\n    }\n  }, \"Transitions\"), mdx(\"li\", {\n    style: {\n      \"opacity\": \"0.3\"\n    }\n  }, \"Automatic batching\"), mdx(\"li\", {\n    style: {\n      \"opacity\": \"0.3\"\n    }\n  }, \"Suspense\"), mdx(\"li\", {\n    style: {\n      \"opacity\": \"0.3\"\n    }\n  }, \"React server components\")), mdx(\"hr\", null), mdx(\"img\", {\n    src: frame1,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: frame2,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: frame3,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: frame4,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: frame5,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: frame6,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: frame7,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: frame8,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: frame9,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(Demo1, {\n    mdxType: \"Demo1\"\n  }), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [nightOwl, nightOwl],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const [query, setQuery] = useState(\\\"\\\");\\n\\nconst [filteredItems, setFilteredItems] = \\nuseState(dummyItems);\\n\")), mdx(Demo1, {\n    mdxType: \"Demo1\"\n  })), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const [query, setQuery] = useState(\\\"\\\");\\n\\nconst [filteredItems, setFilteredItems] = \\nuseState(dummyItems);\\n\\nreturn (\\n  <div>\\n    <input onChange={filterItems} />\\n  </div>\\n);\\n\")), mdx(Demo1, {\n    mdxType: \"Demo1\"\n  })), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const [query, setQuery] = useState(\\\"\\\");\\n\\nconst [filteredItems, setFilteredItems] = \\nuseState(dummyItems);\\n\\nconst filterItems = (e) => {\\n  const value = e.target.value;\\n   const filteredItems = dummyItems.filter(\\n    (item) => item.includes(value)\\n  );\\n\\n  setQuery(value);\\n  setFilteredItems([...filteredItems]);\\n};\\n\\nreturn (\\n  <div>\\n    <input onChange={filterItems} />\\n  </div>\\n);\\n\")), mdx(Demo1, {\n    mdxType: \"Demo1\"\n  })), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const [query, setQuery] = useState(\\\"\\\");\\n\\nconst [filteredItems, setFilteredItems] = \\nuseState(dummyItems);\\n\\nconst filterItems = (e) => {\\n  const value = e.target.value;\\n   const filteredItems = dummyItems.filter(\\n    (item) => item.includes(value)\\n  );\\n\\n  setQuery(value);\\n  setFilteredItems([...filteredItems]);\\n};\\n\\nreturn (\\n  <div>\\n    <input onChange={filterItems} />\\n    <ul>\\n      {filteredItems.map((item) => (\\n        <li>{item}</li>\\n      ))}\\n    </ul>\\n  </div>\\n);\\n\")), mdx(Demo1, {\n    mdxType: \"Demo1\"\n  })), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"12:13\",\n    \"12:13\": true\n  }, \"const [query, setQuery] = useState(\\\"\\\");\\n\\nconst [filteredItems, setFilteredItems] = \\nuseState(dummyItems);\\n\\nconst filterItems = (e) => {\\n  const value = e.target.value;\\n   const filteredItems = dummyItems.filter(\\n    (item) => item.includes(value)\\n  );\\n\\n  setQuery(value);\\n  setFilteredItems([...filteredItems]);\\n};\\n\\nreturn (\\n  <div>\\n    <input onChange={filterItems} />\\n    <ul>\\n      {filteredItems.map((item) => (\\n        <li>{item}</li>\\n      ))}\\n    </ul>\\n  </div>\\n);\\n\")), mdx(Demo1, {\n    mdxType: \"Demo1\"\n  }))), mdx(\"hr\", null), mdx(\"img\", {\n    src: frame10,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: frame11,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"ul\", null, mdx(\"li\", {\n    style: {\n      \"opacity\": \"0.3\"\n    }\n  }, \"Rendering performance\"), mdx(\"li\", null, \"Concurrent rendering\"), mdx(\"li\", {\n    style: {\n      \"opacity\": \"0.3\"\n    }\n  }, \"Transitions\"), mdx(\"li\", {\n    style: {\n      \"opacity\": \"0.3\"\n    }\n  }, \"Automatic batching\"), mdx(\"li\", {\n    style: {\n      \"opacity\": \"0.3\"\n    }\n  }, \"Suspense\"), mdx(\"li\", {\n    style: {\n      \"opacity\": \"0.3\"\n    }\n  }, \"React server components\")), mdx(\"hr\", null), mdx(\"img\", {\n    src: frame12,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: frame13,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: frame14,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: frame15,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"ul\", null, mdx(\"li\", {\n    style: {\n      \"opacity\": \"0.3\"\n    }\n  }, \"Rendering performance\"), mdx(\"li\", {\n    style: {\n      \"opacity\": \"0.3\"\n    }\n  }, \"Concurrent rendering\"), mdx(\"li\", null, \"Transitions\"), mdx(\"li\", {\n    style: {\n      \"opacity\": \"0.3\"\n    }\n  }, \"Automatic batching\"), mdx(\"li\", {\n    style: {\n      \"opacity\": \"0.3\"\n    }\n  }, \"Suspense\"), mdx(\"li\", {\n    style: {\n      \"opacity\": \"0.3\"\n    }\n  }, \"React server components\")), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [nightOwl, nightOwl],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const [query, setQuery] = useState(\\\"\\\");\\n\\nconst [filteredItems, setFilteredItems] = \\nuseState(dummyItems);\\n\\nconst filterItems = (e) => {\\n  const value = e.target.value;\\n  const filteredItems = dummyItems.filter(\\n    (item) => item.includes(value)\\n  );\\n\\n  setQuery(value);\\n  setFilteredItems([...filteredItems]);\\n};\\n\\nreturn (\\n  <div>\\n    <input onChange={filterItems} />\\n    <ul>\\n      {filteredItems.map((item) => (\\n        <li>{item}</li>\\n      ))}\\n    </ul>\\n  </div>\\n);\\n\")), mdx(Demo1, {\n    mdxType: \"Demo1\"\n  })), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const [query, setQuery] = useState(\\\"\\\");\\n\\nconst [filteredItems, setFilteredItems] = \\nuseState(dummyItems);\\n\\nconst [isPending, startTransition] = useTransition();\\n\\nconst filterItems = (e) => {\\n  const value = e.target.value;\\n  const filteredItems = dummyItems.filter(\\n    (item) => item.includes(value)\\n  );\\n\\n  setQuery(value);\\n  setFilteredItems([...filteredItems]);\\n};\\n\\nreturn (\\n  <div>\\n    <input onChange={filterItems} />\\n    <ul>\\n      {filteredItems.map((item) => (\\n        <li>{item}</li>\\n      ))}\\n    </ul>\\n  </div>\\n);\\n\")), mdx(Demo1, {\n    mdxType: \"Demo1\"\n  })), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const [query, setQuery] = useState(\\\"\\\");\\n\\nconst [filteredItems, setFilteredItems] = \\nuseState(dummyItems);\\n\\nconst [isPending, startTransition] = useTransition();\\n\\nconst filterItems = (e) => {\\n  const value = e.target.value;\\n  const filteredItems = dummyItems.filter(\\n    (item) => item.includes(value)\\n  );\\n  setQuery(value);\\n  startTransition(() => {\\n    setFilteredItems([...filteredItems]);\\n  });\\n};\\n\\nreturn (\\n  <div>\\n    <input onChange={filterItems} />\\n    <ul>\\n      {filteredItems.map((item) => (\\n        <li>{item}</li>\\n      ))}\\n    </ul>\\n  </div>\\n);\\n\")), mdx(Demo1, {\n    mdxType: \"Demo1\"\n  })), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"14:16\",\n    \"14:16\": true\n  }, \"const [query, setQuery] = useState(\\\"\\\");\\n\\nconst [filteredItems, setFilteredItems] = \\nuseState(dummyItems);\\n\\nconst [isPending, startTransition] = useTransition();\\n\\nconst filterItems = (e) => {\\n  const value = e.target.value;\\n  const filteredItems = dummyItems.filter(\\n    (item) => item.includes(value)\\n  );\\n  setQuery(value);\\n  startTransition(() => {\\n    setFilteredItems([...filteredItems]);\\n  });\\n};\\n\\nreturn (\\n  <div>\\n    <input onChange={filterItems} />\\n    <ul>\\n      {filteredItems.map((item) => (\\n        <li>{item}</li>\\n      ))}\\n    </ul>\\n  </div>\\n);\\n\")), mdx(Demo2, {\n    mdxType: \"Demo2\"\n  })), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const [query, setQuery] = useState(\\\"\\\");\\n\\nconst [filteredItems, setFilteredItems] = \\nuseState(dummyItems);\\n\\nconst [isPending, startTransition] = useTransition();\\n\\nconst filterItems = (e) => {\\n  const value = e.target.value;\\n  const filteredItems = dummyItems.filter(\\n    (item) => item.includes(value)\\n  );\\n  setQuery(value);\\n  startTransition(() => {\\n    setFilteredItems([...filteredItems]);\\n  });\\n};\\n\\nreturn (\\n  <div>\\n    <input onChange={filterItems} />\\n    {isPending ? (\\n      <div>Loading...</div>\\n    ) : (\\n      <ul>\\n        {filteredItems.map((item) => (\\n          <li>{item}</li>\\n        ))}\\n      </ul>\\n    )}\\n  </div>\\n);\\n\")), mdx(Demo3, {\n    mdxType: \"Demo3\"\n  }))), mdx(\"hr\", null), mdx(UseDeferredValueDemo1, {\n    mdxType: \"UseDeferredValueDemo1\"\n  }), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [nightOwl, vsDark],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"function App() {\\n  const [value, setValue] = useState(0);\\n\\n  return (\\n    <div>\\n      <button\\n        onClick={() => {\\n          setValue((prevValue) => prevValue + 1);\\n        }}\\n      >\\n        {value}\\n      </button>\\n\\n      <ItemList value={value} />\\n    </div>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const ItemList = ({ value }) => {\\n  const result = Array(90000)\\n    .fill(1)\\n    .map((_, index) => {\\n      return <li key={index}>{value + index}</li>;\\n    });\\n  return <ul>{result}</ul>;\\n};\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"function App() {\\n  const [value, setValue] = useState(0);\\n  const deferredValue = useDeferredValue(value);\\n\\n  return (\\n    <div>\\n      <button\\n        onClick={() => {\\n          setValue((prevValue) => prevValue + 1);\\n        }}\\n      >\\n        {value}\\n      </button>\\n\\n      <ItemList value={value} />\\n    </div>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const ItemList = ({ value }) => {\\n  const result = Array(90000)\\n    .fill(1)\\n    .map((_, index) => {\\n      return <li key={index}>{value + index}</li>;\\n    });\\n  return <ul>{result}</ul>;\\n};\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"function App() {\\n  const [value, setValue] = useState(0);\\n  const deferredValue = useDeferredValue(value);\\n\\n  return (\\n    <div>\\n      <button\\n        onClick={() => {\\n          setValue((prevValue) => prevValue + 1);\\n        }}\\n      >\\n        {value}\\n      </button>\\n\\n      <ItemList value={deferredValue} />\\n    </div>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const ItemList = ({ value }) => {\\n  const result = Array(90000)\\n    .fill(1)\\n    .map((_, index) => {\\n      return <li key={index}>{value + index}</li>;\\n    });\\n  return <ul>{result}</ul>;\\n};\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const MemoedList = React.memo(ItemList);\\n\\nfunction App() {\\n  const [value, setValue] = useState(0);\\n  const deferredValue = useDeferredValue(value);\\n\\n  return (\\n    <div>\\n      <button\\n        onClick={() => {\\n          setValue((prevValue) => prevValue + 1);\\n        }}\\n      >\\n        {value}\\n      </button>\\n\\n      <MemoedList value={deferredValue} />\\n    </div>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const ItemList = ({ value }) => {\\n  const result = Array(90000)\\n    .fill(1)\\n    .map((_, index) => {\\n      return <li key={index}>{value + index}</li>;\\n    });\\n  return <ul>{result}</ul>;\\n};\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const MemoedList = React.memo(ItemList);\\n\\nfunction App() {\\n  const [value, setValue] = useState(0);\\n  const deferredValue = useDeferredValue(value);\\n  const isPending = deferredValue !== value;\\n\\n  return (\\n    <div>\\n      <button\\n        onClick={() => {\\n          setValue((prevValue) => prevValue + 1);\\n        }}\\n      >\\n        {value}\\n      </button>\\n\\n      <div\\n        style={{\\n          opacity: isPending ? 0.5 : 1,\\n        }}\\n      >\\n        <MemoedList value={deferredValue} />\\n      </div>\\n    </div>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const ItemList = ({ value }) => {\\n  const result = Array(90000)\\n    .fill(1)\\n    .map((_, index) => {\\n      return <li key={index}>{value + index}</li>;\\n    });\\n  return <ul>{result}</ul>;\\n};\\n\")))), mdx(\"hr\", null), mdx(Demo4, {\n    mdxType: \"Demo4\"\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: nightOwl,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-smalltalk\"\n  }, \"\\nBoth useTransition and useDeferredValue give same results\\nbut useDeferred value is used when you don't have control over the\\nstate update of a value you want to defer.\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-smalltalk\"\n  }, \"\\nBoth useTransition and useDeferredValue give same results\\nbut useDeferred value is used when you don't have control over the\\nstate update of a value you want to defer.\\n\\nuseDeferredValue and useTransition does an extra rerender.\\n\\n\"))), mdx(\"hr\", null), mdx(\"ul\", null, mdx(\"li\", {\n    style: {\n      \"opacity\": \"0.3\"\n    }\n  }, \"Rendering performance\"), mdx(\"li\", {\n    style: {\n      \"opacity\": \"0.3\"\n    }\n  }, \"Concurrent rendering\"), mdx(\"li\", {\n    style: {\n      \"opacity\": \"0.3\"\n    }\n  }, \"Transitions\"), mdx(\"li\", null, \"Automatic batching\"), mdx(\"li\", {\n    style: {\n      \"opacity\": \"0.3\"\n    }\n  }, \"Suspense\"), mdx(\"li\", {\n    style: {\n      \"opacity\": \"0.3\"\n    }\n  }, \"React server components\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: nightOwl,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-smalltalk\",\n    \"metastring\": \"title='Automatic Batching'\",\n    \"title\": \"'Automatic\",\n    \"Batching'\": true\n  }, \"We know that whenever there is a state update\\xA0, react does a re render.\\nBatching is when React groups multiple state updates in a single render for\\nperformance benefits.\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: nightOwl,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const [count, setCount] = useState(0);\\nconst [isActive, setIsActive] = useState(false);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const [count, setCount] = useState(0);\\nconst [isActive, setIsActive] = useState(false);\\n\\nfunction incrementCount() {}\\n\\n<button onClick={incrementCount}>Count</button>;\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const [count, setCount] = useState(0);\\nconst [isActive, setIsActive] = useState(false);\\n\\nfunction incrementCount() {\\n  setCount(count + 1);\\n  setIsActive(!isActive);\\n}\\n\\n<button onClick={incrementCount}>Count</button>;\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const [count, setCount] = useState(0);\\nconst [isActive, setIsActive] = useState(false);\\n\\nfunction incrementCount() {\\n  setTimeout(() => {\\n    setCount(count + 1);\\n    setIsActive(!isActive);\\n  },100);\\n}\\n\\n<button onClick={incrementCount}>Count</button>;\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const [count, setCount] = useState(0);\\nconst [isActive, setIsActive] = useState(false);\\n\\nfunction incrementCount() {\\n  fetch(('/someurl').then(() => {\\n    setCount(count + 1);\\n    setIsActive(!isActive);\\n  });\\n}\\n\\n<button onClick={incrementCount}>Count</button>;\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const [count, setCount] = useState(0);\\nconst [isActive, setIsActive] = useState(false);\\n\\nfunction incrementCount() {\\n  fetch(('/someurl').then(() => {\\n    // 2 rerenders before React 18\\n    // 1 rerender in React 18\\n    setCount(count + 1);\\n    setIsActive(!isActive);\\n  });\\n}\\n\\n<button onClick={incrementCount}>Count</button>;\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: nightOwl,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-smalltalk\"\n  }, \"\\nIn React 18 , all state updates are batched out of the box irrespective of\\nhow they are called.\\n\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: nightOwl,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"function incrementCount() {\\n  flushSync(() => {\\n    setCount(count + 1);\\n  });\\n  setIsActive(!isActive);\\n}\\n\"))), mdx(\"hr\", null), mdx(\"ul\", null, mdx(\"li\", {\n    style: {\n      \"opacity\": \"0.3\"\n    }\n  }, \"Rendering performance\"), mdx(\"li\", {\n    style: {\n      \"opacity\": \"0.3\"\n    }\n  }, \"Concurrent rendering\"), mdx(\"li\", {\n    style: {\n      \"opacity\": \"0.3\"\n    }\n  }, \"Transitions\"), mdx(\"li\", {\n    style: {\n      \"opacity\": \"0.3\"\n    }\n  }, \"Automatic batching\"), mdx(\"li\", null, \"Suspense\"), mdx(\"li\", {\n    style: {\n      \"opacity\": \"0.3\"\n    }\n  }, \"React server components\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: nightOwl,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-smalltalk\"\n  }, \"\\nSuspense lets you specify the loading state for a part of the\\ncomponent tree if it's not yet ready to be displayed\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: nightOwl,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Displaying fallback for lazy loaded component\\\"\",\n    \"title\": \"\\\"Displaying\",\n    \"fallback\": true,\n    \"for\": true,\n    \"lazy\": true,\n    \"loaded\": true,\n    \"component\\\"\": true\n  }, \"function App() {}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Displaying fallback for lazy loaded component\\\"\",\n    \"title\": \"\\\"Displaying\",\n    \"fallback\": true,\n    \"for\": true,\n    \"lazy\": true,\n    \"loaded\": true,\n    \"component\\\"\": true\n  }, \"function App() {\\n  const Profile = React.lazy(() => import(\\\"./Profile\\\"));\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Displaying fallback for lazy loaded component\\\"\",\n    \"title\": \"\\\"Displaying\",\n    \"fallback\": true,\n    \"for\": true,\n    \"lazy\": true,\n    \"loaded\": true,\n    \"component\\\"\": true\n  }, \"function App() {\\n  const Profile = React.lazy(() => import(\\\"./Profile\\\"));\\n\\n  return <Profile />;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Displaying fallback for lazy loaded component\\\"\",\n    \"title\": \"\\\"Displaying\",\n    \"fallback\": true,\n    \"for\": true,\n    \"lazy\": true,\n    \"loaded\": true,\n    \"component\\\"\": true\n  }, \"function App() {\\n  const Profile = React.lazy(() => import(\\\"./Profile\\\"));\\n\\n  return (\\n    <Suspense fallback={<Loading />}>\\n      <Profile />\\n    </Suspense>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Data Fetching\\\"\",\n    \"title\": \"\\\"Data\",\n    \"Fetching\\\"\": true\n  }, \"function Posts() {}\\n\\nfunction App() {\\n  const Profile = React.lazy(() => import(\\\"./Profile\\\"));\\n\\n  return (\\n    <Suspense fallback={<Loading />}>\\n      <Profile />\\n    </Suspense>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Data Fetching\\\"\",\n    \"title\": \"\\\"Data\",\n    \"Fetching\\\"\": true\n  }, \"function Posts() {\\n  const posts = fetchPosts(\\\"/posts\\\");\\n}\\n\\nfunction App() {\\n  const Profile = React.lazy(() => import(\\\"./Profile\\\"));\\n\\n  return (\\n    <Suspense fallback={<Loading />}>\\n      <Profile />\\n    </Suspense>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Data Fetching\\\"\",\n    \"title\": \"\\\"Data\",\n    \"Fetching\\\"\": true\n  }, \"function Posts() {\\n  const posts = fetchPosts(\\\"/posts\\\");\\n  return posts.map((post) => <div>{post.title}</div>);\\n}\\n\\nfunction App() {\\n  const Profile = React.lazy(() => import(\\\"./Profile\\\"));\\n\\n  return (\\n    <Suspense fallback={<Loading />}>\\n      <Profile />\\n    </Suspense>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Data Fetching\\\"\",\n    \"title\": \"\\\"Data\",\n    \"Fetching\\\"\": true\n  }, \"function Posts() {\\n  const posts = fetchPosts(\\\"/posts\\\");\\n  return posts.map((post) => <div>{post.title}</div>);\\n}\\n\\nfunction App() {\\n  const Profile = React.lazy(() => import(\\\"./Profile\\\"));\\n\\n  return (\\n    <Suspense fallback={<Loading />}>\\n      <Profile />\\n      <Posts />\\n    </Suspense>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Data Fetching\\\"\",\n    \"title\": \"\\\"Data\",\n    \"Fetching\\\"\": true\n  }, \"function Posts() {\\n  const posts = fetchPosts(\\\"/posts\\\");\\n  return posts.map((post) => <div>{post.title}</div>);\\n}\\n\\nfunction App() {\\n  const Profile = React.lazy(() => import(\\\"./Profile\\\"));\\n\\n  return (\\n    <Suspense fallback={<Loading />}>\\n      <Profile />\\n      <Suspense fallback=\\\"Loading posts..\\\">\\n        <Posts />\\n      </Suspense>\\n    </Suspense>\\n  );\\n}\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: nightOwl,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-smalltalk\"\n  }, \"Before React 18 suspense was only used for\\n- code splitting \\n- only supported on client.\\n\\nNow it is also supported with server side rendering\\n\"))), mdx(\"hr\", null), mdx(\"img\", {\n    src: suspense1,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: suspense2,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: suspense3,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: suspense4,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: suspense5,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: suspense6,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: suspense7,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: suspense8,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: suspense9,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: suspense10,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"ul\", null, mdx(\"li\", {\n    style: {\n      \"opacity\": \"0.3\"\n    }\n  }, \"Rendering performance\"), mdx(\"li\", {\n    style: {\n      \"opacity\": \"0.3\"\n    }\n  }, \"Concurrent rendering\"), mdx(\"li\", {\n    style: {\n      \"opacity\": \"0.3\"\n    }\n  }, \"Transitions\"), mdx(\"li\", {\n    style: {\n      \"opacity\": \"0.3\"\n    }\n  }, \"Automatic batching\"), mdx(\"li\", {\n    style: {\n      \"opacity\": \"0.3\"\n    }\n  }, \"Suspense\"), mdx(\"li\", null, \"React server components\")), mdx(\"hr\", null), mdx(\"img\", {\n    src: frame17,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: frame18,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: frame19,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: frame20,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: frame21,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: frame22,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: frame23,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: frame24,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: frame25,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: frame26,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: thankyou\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"matchPath":"/*","id":"3c7008a1-f747-50bd-9ab5-48cd6114ff33","slug":"","title":"Perfomance wins in react 18"}},"staticQueryHashes":[]}